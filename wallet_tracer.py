"""
Wallet Tracer ‚Äî –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç –ø–æ—Ç–æ–∫ —Å—Ä–µ–¥—Å—Ç–≤ —Å –∞–¥—Ä–µ—Å–∞ –ø–æ —Ü–µ–ø–æ—á–∫–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π.
"""

import requests
import argparse
from datetime import datetime

def fetch_address_transactions(address, limit=10):
    url = f"https://api.blockchair.com/bitcoin/dashboards/address/{address}?transaction_details=true"
    r = requests.get(url)
    if r.status_code != 200:
        raise Exception("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö.")
    data = r.json()["data"][address]["transactions"][:limit]
    return data

def fetch_transaction_details(txid):
    url = f"https://api.blockchair.com/bitcoin/raw/transaction/{txid}"
    r = requests.get(url)
    if r.status_code != 200:
        return None
    return r.json()["data"][txid]["decoded_raw_transaction"]

def trace_wallet(address):
    print(f"üîç Wallet Tracer: –∞–Ω–∞–ª–∏–∑ –∞–¥—Ä–µ—Å–∞ {address}")
    txids = fetch_address_transactions(address)
    for txid in txids:
        tx = fetch_transaction_details(txid)
        if not tx:
            continue
        time = tx.get("time", "unknown")
        dt = datetime.utcfromtimestamp(int(time)) if time != "unknown" else "???"
        print(f"üì¶ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è {txid} ({dt})")

        outputs = tx.get("vout", [])
        for out in outputs:
            value = out.get("value", 0)
            script = out.get("script_pub_key", {})
            out_addr = script.get("address", "–Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω")
            print(f"    ‚Üí {out_addr}: {value} BTC")

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="Wallet Tracer ‚Äî –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –≤—ã–≤–æ–¥–∞ —Å—Ä–µ–¥—Å—Ç–≤ —Å –∞–¥—Ä–µ—Å–∞.")
    parser.add_argument("address", help="Bitcoin-–∞–¥—Ä–µ—Å")
    args = parser.parse_args()
    trace_wallet(args.address)
